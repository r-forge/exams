\name{exams2html}
\alias{exams2html}
\alias{make_exams_write_html}
\alias{make_exercise_transform_html}

\title{Generation of Exams in HTML Format}

\description{
  Automatic generation of exams in HTML format.
}

\usage{
  exams2html(file, n = 1L, nsamp = NULL, dir = NULL, name = "exam", 
    quiet = TRUE, edir = NULL, tdir = NULL, sdir = NULL, solution = TRUE, 
    doctype = NULL, head = NULL, mathjax = FALSE, resolution = 100,
    width = 4, height = 4, \dots)

  make_exercise_transform_html(converter = c("ttm", "tth", "tex2image"),
    base64 = TRUE, \dots)
    
  make_exams_write_html(doctype = NULL, head = NULL, mathjax = FALSE,
    solution = TRUE, name = NULL, \dots)
}

\arguments{
  \item{file}{character. A specification of a (list of) exercise files.}
  \item{n}{integer. The number of copies to be compiled from \code{file}.}
  \item{nsamp}{integer. The number of exercise files sampled from each
    list element of \code{file}. Sampling without replacement is used
    if possible. (Only if some element of \code{nsamp} is larger than
    the length of the corresponding element in \code{file}, sampling
    with replacement is used.)}
  \item{dir}{character. The output directory, this has to be set if
    \code{n} is greater than 1.}
  \item{name}{character. A name prefix for resulting exercises.}
  \item{quiet}{logical. Should output be suppressed when calling
    \code{\link[utils]{Sweave}}?}
  \item{edir}{character specifying the path of the directory in which
    the files in \code{file} are stored (see also below).}
  \item{tdir}{character specifying a temporary directory, by default
    this is chosen via \code{\link[base]{tempdir}}.}
  \item{sdir}{character specifying a directory for storing supplements, by
    default this is chosen via \code{\link[base]{tempdir}}.}
  \item{solution}{logical. Should the solution be included in the HTML
    output?}
  \item{mathjax}{logical. Should the JavaScript from \url{http://www.MathJax.org/}
    be included for rendering mathematical formulas?}
  \item{doctype}{character vector with a DOCTYPE tag for the HTML page.
    By default HTML4 is employed.}
  \item{head}{character vector for the head tag. By default a simple
    header is employed, setting the font to Arial.}
  \item{resolution, width, height}{numeric. Options for rendering PNG
    graphics passed to \code{\link[utils]{Sweave}}.}
  \item{converter}{character. Workhorse function for transforming LaTeX
    code to HTML. For details see below.}
  \item{base64}{logical. Should images be embeddeg using Base 64 coding?}
  \item{\dots}{arguments passed on to \code{make_exercise_transform_html}.}
}

\details{
  \code{exams2html} generates exams in a very simple HTML format
  using \code{\link[exams]{xexams}}. It proceeds by (1) calling \code{\link[utils]{Sweave}}
  on each exercise, (2) reading the resulting LaTeX code, (3) transforming
  the LaTeX code to HTML, and (4) embedding the HTML code in a very
  simple exercise template (which is currently hard-coded).
  
  For steps (1) and (2) the standard drivers in \code{xexams} are used.
  
  For step (3) a suitable transformation function is set up on the fly
  using \code{make_exercise_transform_html}. This transforms the
  LaTeX code in \code{question}/\code{questionlist} and
  \code{solution}/\code{solutionlist} by leveraging one of three
  functions: \code{\link[tth]{ttm}} produces HTML with MathML
  for mathematical formulas, \code{\link[tth]{tth}} produces
  plain HTML that aims to emulate mathematical formulas, and
  \code{\link[exams]{tex2image}} runs LaTeX and turns the result into
  a single image. In all cases, images can either be stored in
  supplementary files or embedded directly in Base 64 coding.
  
  For step (4) a simple writer function is set up on the fly that
  embeds the transformed HTML code into a hard-coded template and
  writes a single HTML file for each exam.

  When generating only a single exam (as in the examples below),
  \code{exams2html} tries to display this directly in a browser.
  \code{\link[utils]{browseURL}} is used for this which needs
  \code{getOption("browser")} to be set appropriately. While this is
  typically the case in plain R, it may not be in RStudio as this
  currently overwrites the standard (or custom profile) settings.
  Hence, in RStudio the \code{browser} option has to be set manually,
  e.g., to \code{options(browser = NULL)} on Windows,
  \code{options(browser = "/usr/bin/firefox")} on Linux, or
  \code{options(browser = "/Applications/Firefox")} on OS X.
}

\value{
  \code{exams2html} returns a list of exams as generated by \code{\link[exams]{xexams}}.
  
  \code{make_exercise_transform_html} returns a function that is suitable for being
  supplied as \code{driver$transform} to \code{\link[exams]{xexams}}.

  \code{make_exams_write_html} returns a function that is suitable for being
  supplied as \code{driver$write} to \code{\link[exams]{xexams}}.
}

\seealso{
  \code{\link[exams]{xexams}},
  \code{\link[tth]{ttm}},
  \code{\link[tth]{tth}},
  \code{\link[exams]{tex2image}},
  \code{\link[utils]{browseURL}}
}

\examples{
## load package and enforce par(ask = FALSE)
options(device.ask.default = FALSE)

if(interactive()) {
## compile a single random exam (displayed in the browser)
exams2html(list(
  "boxplots",
  c("tstat", "ttest", "confint"),
  c("regression", "anova"),
  "scatterplot",
  "relfreq"
))

## show various versions of displaying mathematical formulae

## via MathML (displayed correctly in MathML-aware browsers, e.g. Firefox)
exams2html("tstat")

## via MathML + MathJax (should work in all major browsers,
## note the display options you get when right-clicking on the formulas
## in the browser)
exams2html("tstat", mathjax = TRUE)

## via plain HTML (works in all browsers but with inferior formatting)
exams2html("tstat", converter = "tth")

## via HTML with embedded picture (works in all browsers but
## is slow and requires LaTeX and ImageMagick)
\dontrun{
exams2html("tstat", converter = "tth")
}
}
}

\keyword{utilities}
