----------
REVIEWER 1
----------

> In general I like the idea and article, but the article is too long and
> needs to be shortened. A drawback is that the use of the software under
> Ubuntu requires a lot of easily avoidable search in my linux system, search
> in the internet and source code inspection:

We appreciate the feedback and tried to address the problems experienced
in the review by bringing out the structure of the manuscript more clearly
and by providing a function exams.skeleton() to make getting started
easier.

The two main sections are still on usage and design of the package. We
emphasize now at the end of the introduction that persons getting started
with the "exams" package should first read Section 2 (on usage of the package)
and proceed with Section 3 (on design) only "as needed". Thus, we have not
shortened the manuscript because we feel that fully exploiting all features
of the package requires attention to many different details (as also indicated
by the experiences of Reviewer 1). Hence, these should be provided in the
manuscript. However, it is true that for the first steps with "exams" it
is not necessary to read all of the manuscript. To facilitate these first
steps, the function exams.skeleton() (or equivalently exams_skeleton())
creates a directory with copies of the .Rnw exercises and templates along
with a demo.R script.

Furthermore, many of the detailed comments of Reviewer 1 pertain only to
the creation of PDF exams via exams() and exams2pdf(), specifically to
customizing the LaTeX master template. It is true that the manuscript does
not discuss these issues sufficiently. The reason for this is that the old
Grün & Zeileis (2009) manuscript already did this (and the new exams2pdf()
interface is largely backward compatible with the old exams() function).
Therefore, we point out more clearly at the end of Sections 2.1 and 2.2,
respectively, that PDF output is discussed in the old manuscript and not
repeated here.

> * My first problem was the errormessage "... is not ASCII and does not
>   declare an encoding".  The R help was useless since it was not clear how
>   the exams package generates its Sweave files.  Finally I changed the
>   encoding of my rnw files to ASCII via 'recode'.

We tried to look at this in more detail, using the exams_experiments.tex
provided by the reviewer. However, that was not in UTF-8 encoding (anymore)
and also did not contain exercises that could be made dynamic easily. Also,
we could not compile that LaTeX file without errors.

As for the encoding issue: We typically recommend to write exercises as
ASCII files (by using LaTeX commands for special characters) as these can
be easily compiled on different platforms using different locale settings.
However, we tried to facilitate using certain encodings, UTF-8 should
now be working for HTML, PDF and Moodle. 

FIXME-IBK
Does it work with OLAT?
NU: Should work, since the qti12 template uses encoding="UTF-8" in the header.


> * Since my first 'myexam' contained just my exam headers I got the next
>   errormessage 'slength >= 1L is not TRUE'.  I guess that somehow the
>   missing meta information in my rnw files is responsible for this.  Meta
>   information seemed useless to me since my headers only contained fields
>   for the student name, id and general hints.  An easy possibility to insert
>   some static text without any exercise would have been nice. A look in the
>   2009 paper of Gr??n and Zeileis revealed that somewhere in my system the
>   templates files used by the 'exams' package are hidden.  I found them
>   under /usr/local/lib/R/site-library/exams/tex .  For writing an R package
>   a command 'package.skeleton' exists, maybe something like this would be
>   possible also for the exams package creating some template files like
>   'plain' (solutions and exercises) and 'exam' (only exercises). Finally, I
>   solved this problem with extending the question environment with optional
>   parameter which called \item[] ...  and creating an empty exercise with
>   this optional parameter.

First, the manuscript points out more clearly now at the end of Section 2.1
where the LaTeX templates can be found and that details on their customization
can be found in Grün & Zeileis (2009).

Second, we really liked the idea of the exams.skeleton() function that was
now added to the package. You can simply say

  exams.skeleton(dir = "/path/to/my/dir")

and this will copy all exercise .Rnw files, the corresponding templates (for
LaTeX, HTML, XML) and a demo.R script to the directory indicated. The demo.R
script then shows how different types of output can be generated by using
the files provided. The exams.skeleton() function also allows to restrict
the demo.R script to certain types of exercises (only num or mchoice etc.)
or certain exams2xyz interfaces, and to use absolute paths if desired.

Third, the manuscript now recommends explicitly not to start with customization
of a specific layout in LaTeX but to rather start by creating some (simple)
.Rnw exercises and rendering them into different output formats. Adaptation
of existing .Rnw exercises should hopefully be easier after creating local
copies in a directory via exams.skeleton().

> * After copying the template file in my working directory I created an exam
>   only with "tstat.Rnw" with my own template file.  Integrating our logo as
>   a PNG graphics in my own header file leads to the errormessage "!  LaTeX
>   Error: File `logo' not found.".  After digging in the system I found under
>   /tmp/RtmprrdDQN/file1c084150cdff/ the temporary directory used; identified
>   by time stamp :( Of course the logo.png was not copied to the temporary
>   directory.  Which meant for me I had to create my own temporary directory
>   where I copied the missing file.  Maybe it would helpful either to add a
>   parameter which allows to copy additional files or simply to copy all
>   files from the working directory to the temporary directory.

Yes, that is what the argument 'inputs' is intended for. This is pointed out
in ?exams and ?exams2pdf as well as Grün & Zeileis (2009).

> * After creating a subdirectory "exercises" with six exercises the following
>   call gave the errormessage that exercise files can not be found: "Error in
>   exams(myexam, template = "plain", edir = "./exercises", tdir = "./tmp") :
>   The following files cannot be found: ...".  The exams command looked into
>   "/usr/local/lib/R/site-library/exams/exercises/./exercises" for the
>   exercise files and an absolute path for edir was necessary. 

We cannot reproduce this problem. Both absolute and relative paths work fine
for us. This is now also easily illustrated by exams.skeleton(). Furthermore,
consider the following example:

## create and change to temporary directory
td <- tempdir()
setwd(td)

## create sub-directory exercises
dir.create("exercises")

## make a copy of tstat.Rnw in exercises sub-directory
file.copy(file.path(find.package("exams"), "exercises", "tstat.Rnw"),
  file.path("exercises", "tstat-copy.Rnw"))

## the template itself is not found
exams2pdf("tstat-copy")

## but all of these work correctly
exams2pdf("tstat-copy", edir = "exercises")
exams2pdf("tstat-copy", edir = "./exercises")
exams2pdf("tstat-copy", edir = file.path(td, "exercises"))

>   It would be
>   nice if the exams command would also search in subdirectories of the edir
>   such that one can build a directory structure containing exercises
>   seperated by topics.

Thanks, this is a good idea. In case an 'edir' is specified, it is now searched
recursively for the exercise .Rnw files.

> * And again an encoding problem, but recoding did not help this time. The
>   problem was that the current working directory was not my test directory
>   but my home directory.  Therefore the plain.tex was again taken from
>   "/usr/local/lib/R/site-library/exams/tex" rather my own plain.tex from my
>   test directory.  After changing the working directory of R to my test
>   directory also the relative directory paths worked.
>
> * Adding more exercises lead again to an encoding problem. Calling recode
>   and cleaning my tmp directory helped now.

Similar to some other problems reported above, we were not able to track down
these particular problems. But we hope that we have adressed it with the
improvements discussed above.

> * Replacing in my R program 'exams' by 'exams2pdf'/'exams2moodle' lead to
>   the error message "Error: slength >= 1L is not TRUE".  A internet search
>   showed that the Metainformation \exsolution in the rnw-files was empty. 

Yes, the error message was too opaque. The new version of exams now reports
the following error: 'no \exsolution{} specified'

> * After correcting this error 'exams2moodle' complained about "Error in if
>   (x[n] == sep) return(x[-n]) : Argument has length 0".

Sorry, we were not able to replicate this problem with the information provided
and hence were not able to fix it.

> The only thing what really worked without any problems was the most simple
> example from the paper via copy and paste.  Creating my own exam was a pain. 
> It took me more then a day to get a PDF version of a current exam by myself. 
> A bit more information from the exams's command, e.g.  which directories are
> used, more informative error messages would have helped a lot.  Since we are
> transfering ourself statistics exercises from LaTeX to Moodle the
> 'exams2moodle' would have been interesting to us, but I'am not willing to
> spend more time on it.

Our feeling is that converting an existing exam template (created without
the R package) to the "exams" package can be a challenge because the structure/setup
may be rather different and fine-tuning of the layout/formatting works somewhat
differently. As already pointed out above, in our experience it is better to
start fresh from simple exercise templates, first leaving the layouting to
the package before exploring refined formatting options.

So far users of the R package had very different starting points and very different
needs when switching to the R package. Due to this heterogeneity, there is
probably not one set of documentation/examples that suits all prospective users.
We hope that exams.skeleton() facilitates the situation for some of them.
Furthermore, for this reason, we do provide hands-on assistance in the R-Forge
forum. Thus, if you or your colleagues are still interested in setting up
Moodle infrastructure, we encourage you to contact us in the forum and we will
try to help you.


----------
REVIEWER 2
----------

> The manuscript is very well written and solves an interesting and real
> problem. I enjoyed reading it.
> 
> My questions/comments:
> 
> 1) The convention of using exams2xyz is interesting. Why was there not a
> straight-forward application of object oriented programming where there is
> one common class (say 'exams') and methods to generate the appropriate
> format (much in the same way that 'print' displays an object)?

When writing the new version of the "exams" package we discussed such a setup
of first reading everything into R and then writing everything out to some
desired file again. We decided against this because reading all supplementary
graphics, data files, etc. into R would make the exams object potentially
really huge. But as the goal of the exams package is really to write exams
in different formats to the disk (rather creating representations of the
exams within R), we decided not to read everything into R. Hence, we store
supplementary files only on the disk and directly weave/read/transform/write
in one go. Especially, in situations where you create a large e-learning exam
(say 1,000 copies of a dozen exercises) this seemed to be a more practical
solution, albeit not quite as elegant as a formal object-oriented approach.
 
> 2) Not much is said about assigning points to questions, especially
> multiple choice problems. I know that this is possible in Moodle. Wouldn't
> this require manual tinkering with the resulting XML files? If not, it
> would be helpful to show some details in the manuscript.

In the original version we just had \expoints{} with the number of
points for the overall exam because for OLAT we have to do the rest of
the customization within OLAT anyway. For Moodle we had one fixed
scheme how to assign points to multiple choice items. We have now
generalised this to a user-speciefied function that implements a
particular multiple choice policy. Available policies are one wrong
answer cancels all correct ones, one wrong cancels one correct,
etc. Thanks a lot for your question which led to a much more elegant
solution.

FIXME-FL
Check mchoice policies in exams2moodle, what to do when there is no correct solution?

FIXME-FL or NU
Describe policies in paper (after implementation)

FIXME-FL
One idea could be to have a generic \exextra{}{} command for passing extra
metainformation to systems like Moodle, e.g., \exextra{answernumbering}{ABCD}.
Alternatively, we could of course extend the set of \ex*{} commands, e.g.,
\exanswernumbering{ABCD} but the drawback would be that these are only recognized
by some interfaces and it would be hard to anticipate all potential tags
we may need in the future.

But maybe, Fritz, you have a better suggestion based on your experiences at

F: I currently don't need more tags beyond what we have in
read_metainfo, and certainly not answernumbering. But \exextra could
make a lot of sense, because one could very quickly use an extra
option for a particular driver -> on 2do list for future versions?
Implement without using seems silly to me.



> 3) While I don't have any issue with using LaTeX as the base markup
> language, it may leave some unwilling to use this framework. I have seen
> more willingness to accept markdown as a base format from the LaTeX
> uninitiated. Do the authors have any insight into this from a sociology
> perspective and a technical perspective (i.e. translation of markdown to
> other formats)?

The reason for using LaTeX is that in statistics and mathematics exams we
regularly need mathematical notation, especially for showing the correct
solutions. (This is true for most exercises in the exams package.)
Markdown is no alternative for this.

And for the case where no mathematical notation is needed, the markup
required is really minimal, just {question}/{solution} and the \ex*
metainformation. Therefore, it is our feeling that there is no pressing
need for more explicit Markdown format

> 4) Can the system accommodate multi-part questions? For example, if the
> same data set is used over a series of questions, should the data be
> created repeatedly for each questions? Suppose I have a simple 2-way
> factorial design. I may want to ask a series of questions based on the
> same data regarding: the full main effects and interaction model, the main
> effects only model, model diagnostics, post-hoc comparisons, etc. How
> would one structure such a problem in this system.

When the different parts are rather small, then using "cloze" exercises
(as in boxhist.Rnw) are a convenient option. When the parts are larger
(as in the scenario you describe above), you can simply reuse the data
that was created which is directly available in the global environment.
Consider the following simple example:

exams2html("boxplots")
stripchart(y ~ x, data = dat, vertical = TRUE)

Thus, if you assure that one exercise is always carried out after the
other, the (somewhat quick & dirty) solution is to just use the same
data again.

> 5) I would recommend rewriting the sentence "Here, we focus on an
> illustration how to generate different output formats form such
> exercises." Perhaps to much alliteration for me, but it took me a minute
> to parse that text.

Thanks, rephrased now.

