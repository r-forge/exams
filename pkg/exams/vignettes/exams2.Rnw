\documentclass[nojss]{jss}
\usepackage{thumbpdf}
%% need no \usepackage{Sweave}

%% additional commands
\newcommand{\squote}[1]{`{#1}'}
\newcommand{\dquote}[1]{``{#1}''}
\newcommand{\class}[1]{\dquote{\code{#1}}}
%% for internal use
\newcommand{\fixme}[1]{\emph{\marginpar{FIXME} (#1)}}
\newcommand{\readme}[1]{\emph{\marginpar{README} (#1)}}

%% new environments for exams
\newenvironment{question}{\item \textbf{Problem}\newline}{}
\newenvironment{solution}{\textbf{Solution}\newline}{}

\author{Achim Zeileis\\Universit\"at Innsbruck
   \And Nikolaus Umlauf\\Universit\"at Innsbruck\\
   \And Friedrich Leisch\\Universit\"at f\"ur\\Bodenkultur Wien}
\Plainauthor{Achim Zeileis, Nikolaus Umlauf, Friedrich Leisch}

\title{Flexible Generation of E-Learning Exams in \proglang{R}: \pkg{Moodle} Quizzes, \pkg{OLAT} Assessments, and Beyond}
\Plaintitle{Flexible Generation of E-Learning Exams in R: Moodle Quizzes, OLAT Assessments, and Beyond}
\Shorttitle{Flexible Generation of E-Learning Exams in \proglang{R}}

\Keywords{exams, e-learning, multiple choice, arithmetic problems, \code{Sweave}, \proglang{R}, {\LaTeX}, HTML, XML, \pkg{Moodle}, \pkg{OLAT}}
\Plainkeywords{exams, e-learning, multiple choice, arithmetic problems, Sweave, R, LaTeX, HTML, XML, Moodle, OLAT}

\Abstract{
  The capabilities of the package \pkg{exams} for automatic generation
  of (statistical) exams in \proglang{R} are considerably extended:
  It is still based on separate \code{Sweave} files for each exercise --
  but rather than just producing different types of PDF output
  files (e.g., for exams, self-study materials, etc.), the package can
  now render the \emph{same} exercises into a wide variety of output formats.
  These include HTML (with various options for displaying mathematical
  content) and XML specifications for online exams in learning
  management systems such as \pkg{Moodle} or \pkg{OLAT}.  
  This flexibility is accomplished by a new modular and extensible design of the
  package that allows for reading all weaved exercises into \proglang{R} and
  managing associated supplementary files (such as graphics or data files).  
  The manuscript discusses the readily available user interfaces, 
  the design of the underlying infrastructure, and how new functionality can
  be built on top of the existing tools.
}

\Address{
  Achim Zeileis, Nikolaus Umlauf\\
  Department of Statistics\\
  Faculty of Economics and Statistics\\
  Universit\"at Innsbruck\\
  Universit\"atsstr.~15\\
  6020 Innsbruck, Austria\\
  E-mail: \email{Achim.Zeileis@R-project.org}, \email{Nikolaus.Umlauf@uibk.ac.at}\\
  URL: \url{http://eeecon.uibk.ac.at/~zeileis/}, \url{http://eeecon.uibk.ac.at/~umlauf/}\\

  Friedrich Leisch\\
  Institute of Applied Statistics and Computing\\
  Universit\"at f\"ur Bodenkultur Wien\\
  Peter Jordan-Str.~82\\
  1180 Wien, Austria\\
  E-mail: \email{Friedrich.Leisch@R-project.org}\\
  URL: \url{http://www.rali.boku.ac.at/friedrichleisch.html}
}

\begin{document}

\SweaveOpts{engine = R, eps = FALSE, keep.source = TRUE}
%\VignetteIndexEntry{Flexible Generation of E-Learning Exams in R: Moodle Quizzes, OLAT Assessments and Beyond}
%\VignetteDepends{stats, graphics, tools, utils, tth, base64enc}
%\VignetteKeywords{exams, e-learning, multiple choice, arithmetic problems, Sweave, R, LaTeX, HTML, XML, Moodle, OLAT}
%\VignettePackage{exams}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 76, prompt = "R> ", continue = "+  ")
library("exams")
library("base64enc")
library("tth")
@

\section{Introduction} \label{sec:intro}

The design for version~1 of the \pkg{exams} package was conceived
seven years ago (in 2006) when the original authors
\citep{exams:Gruen+Zeileis:2009} were involved in a redesign of the
introductory statistics lecture at WU Wirtschaftsuniversit\"at Wien.
Back then the main goal was to be able to produce exams along with
associated self-study materials as PDF (portable document format)
files. Thus, the main focus was still on printable materials for
classic classroom exams. Although e-learning systems started to become
available more easily back at that time, they were still not very widely used
and, more importantly, rather few easy-to-use standards for specifying
e-learning exams were available (e.g., WU Wien used a partially
self-developed e-learning system).

However, since 2006 the situation
has clearly changed: E-learning systems are now abundant with many
universities offering one (ore more) e-learning system(s) in which
all students are readily registered. Consequently, many lecturers
routinely offer online exams (or tests, quizzes, assessments)
for large-lecture courses -- either as self-study materials or as
(part of) the main assessment of the course.

Among the more popular choices of learning management systems are the
open-source systems \pkg{Moodle}, developed by \cite{exams:Moodle:2012} 
and supported by a large world-wide user community, or \pkg{OLAT}
(for online learning and training), developed by \cite{exams:OLAT:2012},
or the commercial \pkg{Blackboard} system, developed by \citep{exams:Blackboard:2010}.
Standards for specifying and exchanging e-learning exams/assessements
have also emerged. While \pkg{Moodle} relies on its own \pkg{Moodle}
XML format, \pkg{OLAT} and \pkg{Blackboard}
employ certain subsets of the international QTI (question \& test interoperability)
standard, version~1.2, maintained by the \cite{exams:QTI12:2012}.
The successor formats are QTI~2.0 and the current QTI~2.1 which is
for example employed in the \pkg{ONYX} testsuite \citep{exams:BPS:2012}
that also offers interfaces to \pkg{OLAT} and \pkg{Blackboard}.

Therefore, although the PDF exams produced by version~1 of the \pkg{exams}
package as introduced by \cite{exams:Gruen+Zeileis:2009} are still
useful for many types of courses, it would also be highly desirable
to have support for generating e-learning exams \emph{from the same pool
of exercises}. In fact, this became an apparent need when the authors
of the present manuscript took over new large-lecture statistics and
mathematics courses at their respective institutions (Universit\"at Innsbruck
and Universit\"at f\"ur Bodenkultur Wien, respectively). For example,
the new ``Mathematics~101'' lecture at Universit\"at Innsbruck is
currently attended by about 1,600~students (mostly first-year business and
economics students) and accompanied by biweekly online exams conducted in
the university's \pkg{OLAT} learning management system. This was a strong
incentive to start developing version~2 of the \pkg{exams} package that is presented
here and offers an extensible toolbox for generating e-learning exams,
including easy-to-use functions for \pkg{Moodle} quizzes and \pkg{OLAT}
assessments.

The new version of the \pkg{exams} package for the \proglang{R} system for 
statistical computing \citep{exams:R:2012} is now available from the
Comprehensive \proglang{R} Archive Network at \url{http://CRAN.R-project.org/package=exams}.
As prior versions of \pkg{exams} it employs ideas and technologies
from literate programming and reproducible research
\citep[see e.g.,][]{exams:Knuth:1992,exams:deLeeuw:2001,exams:Leisch+Rossini:2003}
by using \code{Sweave()} \citep{exams:Leisch:2002a} to combine data-generating
processes (DGPs) in \proglang{R} with corresponding questions/solutions
in {\LaTeX} \citep{exams:Knuth:1984,exams:Lamport:1994}. But in addition
to producing exams in PDF format, the new version of \pkg{exams} includes
extensible tools for generating other output formats \emph{without} having
to modify the pool of exercises. Thus, the design principles of the \pkg{exams}
package are only somewhat extended compared to version~1:
\begin{itemize}
  \item Each exercise template (also called ``exercise'' for short) is a single
    \code{Sweave} file (\code{.Rnw}) interweaving \proglang{R} code for data
    generation and {\LaTeX} code for describing question and solution.
  \item Exams can be generated by randomly drawing different versions of exercises from a
    pool of such \code{Sweave} exercise templates. The resulting exams can be
    rendered into various formats including PDF, HTML, \pkg{Moodle} XML, or QTI~1.2 (for \pkg{OLAT}).
  \item Because exercises are separate standalone files maintenance is simple.
    Large teams can work jointly on the pool of exercises in a multi-author and
    cross-platform setting because each team member can independently develop
    and edit a single exercise.
\end{itemize}
In the remainder of this paper we illustrate in Section~\ref{sec:usage} how to use
both the old and new exam-generating functions that are readily available in the
package. Subsequently, we provide details about the design underyling the toolbox
for the new infrastructure in Section~\ref{sec:design}. Furthermore, Section~\ref{sec:extensions}
provides details on how to extend this toolbox, e.g., to other e-learning
environments or exam servers. Finally, a discussion in Section~\ref{sec:discussion}
concludes the paper.


\section[Using the exams package]{Using the \pkg{exams} package} \label{sec:usage}

In this section we provide an overview of the most important user interfaces provided
by the \pkg{exams} package. First, the format of the exercise \code{Sweave} files
is reviewed along with the old (version~1) \code{exams()} function. Subsequently,
the new (version~2) functions are introduced: \code{exams2pdf()} and
\code{exams2html()} produce one PDF or HTML file for each exam, respectively. In case
of just a single exam, this is shown interactively in a viewer/browser.
\code{exams2moodle()} and \code{exams2qti12()} generate \pkg{Moodle} and QTI~1.2 exams,
respectively. They always produce just a single ZIP file -- containing the exam XML
specification(s) -- which can be easily uploaded into \pkg{Moodle} and \pkg{OLAT}, respectively.


\subsection[Version 1: PDF exams() from Sweave exercises]{Version~1: PDF \code{exams()} from \code{Sweave} exercises}

Exercise templates (or just ``exercises'' for short) are essentially
separate standard \code{Sweave} files \citep{exams:Leisch:2008a,exams:Leisch:2008}.
They are composed of the following elements:
\begin{itemize}
  \item \proglang{R} code chunks (as usual within \verb|<<>>=| and \code{@})
    for random data generation.
  \item Question and solution descriptions contained in {\LaTeX}
    environments of corresponding names. Both can contain \proglang{R}
    code chunks again or include data via \verb|\|\verb|Sexpr{}|.
  \item Metainformation about the exercise type (numeric, multiple
    choice, \dots), its correct solution etc. All metainformation commands
    are in {\LaTeX} style but are actually commented out and hidden in the final
    output file.
\end{itemize}
The underlying ideas are eplained in more detail by
\cite{exams:Gruen+Zeileis:2009} and Section~\ref{sec:design} provides
more technical details. Here, we focus on an illustration how to generate
different output formats form such exercises.

In Figure~\ref{fig:Rnw}, the \code{Sweave} file for a simple exercise asking
students to compute a one-sample $t$~test statistic is shown for
illustration \citep[as already used by][]{exams:Gruen+Zeileis:2009}. The
\proglang{R} chunk for the DGP, the \code{question} and \code{solution} environments,
and the metainformation can be easily distinguished. The {\LaTeX} file
resulting from an \code{Sweave()} call is shown in Figure~\ref{fig:tex}, and 
Figure~\ref{fig:pdf} shows the final compiled PDF output generated by
<<exams1, echo=TRUE, eval=FALSE>>=
library("exams")
set.seed(1090)
exams("tstat.Rnw")
@
Here, the \code{exams()} function looks for the exercise template \code{tstat.Rnw}
first in the local working directory and then within the installed \pkg{exams} package
where this file is provided. Then it copies the exercise \code{.Rnw} to a temporary
directory, calls \code{Sweave()} to generate the \code{.tex}, and includes this
in the default {\LaTeX} template for exams before producing the \code{.pdf}. As,
by default, just a single \code{.pdf} exam is produced and no output directory
is specified, a PDF viewer pops up and displays the resulting exam (as in
Figure~\ref{fig:pdf}).

%% from Rnw
\begin{figure}[p!]
\centering
\makebox[\textwidth]{\hrulefill}

<<echo=FALSE, results=tex>>=
invisible(file.copy(system.file("exercises", "tstat.Rnw", package = "exams"), "tstat.Rnw"))
Rnw <- readLines("tstat.Rnw")
cat(c("\\begin{verbatim}", Rnw, "\\end{verbatim}"), sep = "\n")
@

\makebox[\textwidth]{\hrulefill}
\caption{\label{fig:Rnw} A simple \code{Sweave} exercise: \code{tstat.Rnw}.}
\end{figure}

%% to LaTeX
\begin{figure}[t!]
\centering
\makebox[\textwidth]{\hrulefill}

<<echo=FALSE, results=hide>>=
set.seed(1090)
Sweave("tstat.Rnw")
tex <- readLines("tstat.tex")
file.remove(c("tstat.Rnw", "tstat.tex"))
@
<<echo=FALSE, results=tex>>=
cat(c("\\begin{verbatim}", tex, "\\end{verbatim}"), sep = "\n")
@

\makebox[\textwidth]{\hrulefill}
\caption{\label{fig:tex} {\LaTeX} output of \code{Sweave("tstat.Rnw"}).}
\end{figure}

%% to PDF/HTML
\begin{figure}[p!]
\centering
\makebox[\textwidth]{\hrulefill}
\begin{enumerate}

<<echo=FALSE, results=tex>>=
cat(tex, sep = "\n")
@

\end{enumerate}
\makebox[\textwidth]{\hrulefill}
\caption{\label{fig:pdf} Display of a \code{tstat} exercise as PDF via \code{exams()} (or \code{exams2pdf()}).}

\vspace*{0.5cm}

\includegraphics[width=\textwidth]{screenshots/exams2html-tstat.png}
\caption{\label{fig:exams2html-tstat} Display of a \code{tstat} exercise as HTML via \code{exams2html()}.
MathML is employed for mathematic equations, as rendered by a \pkg{Firefox} browser.}
\end{figure}


While applying \code{exams()} to just a single exercise is very useful while
writing/programming an exercise, a full exam will typically encompass several different
exercises. Also, it may require suppressing the solutions, including a title page
with a questionnaire form, etc. The former can be achieved by supplying a
(list of) vector(s) of exercises while the latter can be accomodated by
using different templates:
<<myexam1>>=
myexam <- list(
  "boxplots",
  c("confint", "ttest", "tstat"),
  c("anova", "regression"),
  "scatterplot",
  "relfreq")
odir <- tempfile()
set.seed(1090)
x1 <- exams(myexam, n = 3, dir = odir, template = c("exam", "solution"))
@
The \code{myexam} list contains five exercises: the first one is always \code{boxplots.Rnw}
while the second exercise is randomly drawn from \code{confint.Rnw}, \code{ttest.Rnw},
\code{tstat.Rnw}, and so on for the remaining exercises. Then, \code{exams()} is used to draw
\code{n = 5} random exams and produce one exam and one solution PDF for each.
(All involved \code{.Rnw} files and \code{.tex} templates are provided in the installed
\pkg{exams} package.) The resulting output files are stored along with the extracted
metainformation in the output directory:
<<myexam1-odir>>=
dir(odir)
@
More details on usage and customization of this function are provided by \cite{exams:Gruen+Zeileis:2009}.
An overview of the most important arguments that are also shared by the version~2 interfaces
is given in Table~\ref{tab:args}.

\begin{table}[t!]
\centering
\begin{tabular}{lp{13cm}} \hline
Argument          & Description \\ \hline
\code{file}       & A (list of) character vector(s) specifying the (base) names of
                    the \code{Sweave} exercise files. \\
\code{n}          & The number of exams to be generated from the list of exercises. Default: 1.\\
\code{nsamp}      & The number of exercise files sampled from each list element of \code{file}.
                    Default: One for each list element.\\ \hline
\code{dir}        & Path to output directory. Default: Single PDF or HTML files are shown directly
                    in a viewer/browser (i.e., \code{exams}/\code{exams2pdf}/\code{exams2html}
		    with \code{n = 1}). In all other cases no default is provided.\\ 
\code{name}       & Name prefix for the resulting exam files.\\
\code{template}   & Character specifying the (base) names of a {\LaTeX}, HTML, or XML file
                    template for the exam (except for \code{exams2moodle()}). Default:
		    A function-specific template provided within the \pkg{exams} installation.\\
\code{edir}       & Path to the directory in which the exercises in \code{file} are stored.
                    Default: Working directory (or within the \pkg{exams} installation). \\
\code{tdir}       & Path to a temporary directory in which \code{Sweave()} is carried out.
                    Default: New \code{tempdir()}. \\
\code{sdir}       & Path to the directory in which supplementary files (e.g., graphics or
                    data files) are stored (except for \code{exams()}). Default: New \code{tempdir()}. \\ \hline
\end{tabular}
\caption{\label{tab:args} Common arguments of the main user interfaces for generating exams:
  \texttt{exams()}, \texttt{exams2pdf()}, \texttt{exams2html()}, \texttt{exams2moodle()}, \texttt{exams2qti12()}.
  The first group of arguments pertains to the specification of the exam(s) and the second
  section to the handling of files and input/temporary/output directories.
  For further function-specific arguments and more details/examples, see the corresponding manual pages.}
\end{table}

\subsection[Version 2: Producing PDF, HTML, or XML for Moodle or OLAT]{Version~2: Producing PDF, HTML, or XML for \pkg{Moodle} or \pkg{OLAT}}

The new infrastructure added to the \pkg{exams} package on the road to version~2 is
providing more flexibility and enables a much broader variety of output formats while keeping the
specification of the exercise templates fully backward compatible and only slightly extended.
While the design of the underlying workhorse functions is rather different (see Section~\ref{sec:design}),
the new user interfaces are very similar to the old one, sharing most of its arguments (see Table~\ref{tab:args}).
Hence, for users of the previous version of the package, it is easy and straightforward to
adapt to the new facilities.

\subsubsection[Producing PDF documents: exams2pdf()]{Producing PDF documents: \code{exams2pdf()}}

The function \code{exams2pdf()} is simply a proof-of-concept reimplementation of \code{exams()}
using the new extensible infrastructure of the \pkg{exams} package. For the user virtually nothing
changes:
<<exams2pdf, eval=FALSE>>=
set.seed(1090)
exams2pdf("tstat.Rnw")
@
pops up the same PDF as shown in Figure~\ref{fig:pdf}. The main difference is that unlike \code{exams()}
the function \code{exams2pdf()} returns not only the metainformation from the exercise but additionally
also the {\LaTeX} code for the question and solution environments as well as paths to supplementary
materials (such as graphics or data files). Section~\ref{sec:design} explains
the structure of the return values in more detail and illustrates how this can be used.


\subsubsection[Producing HTML documents: exams2html()]{Producing HTML documents: \code{exams2html()}}

As a first step towards including exams generated from \code{Sweave} files into e-learning
exams, it is typically necessary to be able to generate an HTML version of the exams. Hence, the
function \code{exams2html()} is designed analogously to \code{exams()}/\code{exams2pdf()} but
produces HTML files. In case of just a single generated exam, this is displayed in a browser
using base \proglang{R}'s \code{browseURL()} function\footnote{In \pkg{RStudio}
\citep{exams:RStudio:2012}, versions prior to~0.97.133, the \code{"browser"} option is set
to a function that cannot browse local HTML files on some platforms. Recent versions of
\pkg{RStudio} have resolved this problem and \code{?exams2html} also provides 
workarounds for older \pkg{RStudio} versions.}. Again, this is particularly useful while
writing/programming a new exercise template.
For example,
<<exams2html, eval=FALSE>>=
set.seed(1090)
exams2html("tstat.Rnw")
@
generates the HTML file shown in Figure~\ref{fig:exams2html-tstat} which corresponds directly to the PDF
file from Figure~\ref{fig:pdf}. Note that for properly viewing the formulas in this HTML file,
a browser with MathML support is required. This is discussed in more detail in Section~\ref{sec:transform_html}.
Here, \pkg{Iceweasel} is used -- Debian's rebranding of the \pkg{Firefox} browser which as native MathML support.

To transform the {\LaTeX} questions/solutions to something that a web browser can
render, three options are available: translation of the {\LaTeX} to (1)~plain HTML,
(2)~HTML plus MathML for mathematical formulas (default), or conversion of the corresponding PDF
to (3)~HTML with one embedded raster images for the whole question and solution, respectively.
The former two options are considerably faster and more elegant -- they just require the
\proglang{R}~package \pkg{tth} \citep{exams:Hutchinson+Leisch+Zeileis:2012} that make
the `{\TeX}-to-HTML' converter \pkg{TtH} \citep{exams:Hutchinson:2012} easily available
in~\proglang{R}. Also, by default, the \pkg{base64enc} package \citep{exams:Urbanek:2012}
is employed for embedding graphics in Base64 encoding. More details on this approach
are provided in Section~\ref{sec:transform_html}.

The HTML files produced with approaches~(1) and~(2) can also easily contain hyperlinks to
supplementary files. For example, if the \proglang{R} code in the \code{Sweave} file
generates a file \code{mydata.rda}, say, then simply including \verb|\url{mydata.rda}|
in the question/solution will result in a suitable hyperlink. The supplementary data
files for each random replication of the exercise is managed fully automatically and
a copy of the data is created in an (exam-specific) sub-directory of the output directory.
Run \code{exams2html("boxhist.Rnw")} for such an example.

\subsubsection[Producing Moodle XML: exams2moodle()]{Producing \pkg{Moodle} XML: \code{exams2moodle()}}

To incorporate exams generated from \code{Sweave} exercises into learning management
systems, such as \pkg{Moodle}, two building blocks are typically required: (1)~questions/solutions
are available in plain text or HTML format, and (2)~questions/solutions can be embedded
along with the metainformation about the possible and correct solutions into some
exam description format. (1)~can be accomplished as outlined in the
previous subsection for \code{exams2html()} and for \pkg{Moodle} (2)~requires
embedding everything into \pkg{Moodle} XML format. Both steps can be easily carried
out using the \code{exams2moodle()} function:
<<exams2moodle, eval=TRUE>>=
set.seed(1090)
exams2moodle(myexam, n = 3, dir = odir)
@
This draws the same three random exams from the \code{myexam} list that were already
generated in PDF format above. The output file, stored again in \code{odir}, is a
single ZIP file containing the exercise-specific XML files.
<<myexam2-odir>>=
dir(odir)
@
This ZIP file \code{moodlequiz.zip} can be easily imported into a \pkg{Moodle} quiz and then further
customized. Figure~REF \fixme{need Moodle screenshot} shows the first random draw
of the \code{boxplots} exercise in the resulting \pkg{Moodle} quiz (again rendered
by a \pkg{Firefox} browser).

As before, supplementary files are automatically managed and can easily be
included using \verb|\url{}| in the underlying {\LaTeX} code. Graphics are
by default included in the HTML code directly using Base64 encoding.


\subsubsection[Producing QTI 1.2 XML (for OLAT): exams2qti12()]{Producing QTI 1.2 XML (for \pkg{OLAT}): \code{exams2qti12()}}

The generation of QTI~1.2 assessments (for \pkg{OLAT}) proceeds essentially in the
same way as for the \pkg{Moodle} quizzes. The same three random draws of exams from
\code{myexam} can be prepared in QTI~1.2 format via:
<<exams2qti12, eval=TRUE>>=
set.seed(1090)
exams2qti12(myexam, n = 3, dir = odir)
@
This produces a single ZIP file \code{qti.zip}, again written to \code{odir}.
<<myexam3-odir>>=
dir(odir)
@
The ZIP file can again be easily imported into an \pkg{OLAT} test where some
further customization can be performed\footnote{While customization of the
features of the overall assessment was always possible for us, \pkg{OLAT}
typically did not allow for modification of the individual exercise item.
We were not able to track down which part of the QTI~1.2 XML caused this.}.
The first \code{boxplots} exercise from the exam generated above is shown in
(a German installation of) \pkg{OLAT} in Figure~\ref{fig:exams2qti12-boxplots}
(again as rendered by a \pkg{Firefox} browser).

\begin{figure}[t!]
\centering
\includegraphics[width=\textwidth]{screenshots/exams2qti12-boxplots.png}
\caption{\label{fig:exams2qti12-boxplots} Display of exercise~1 (\code{boxplots}) from
  \code{myexam} in (a German installation of) \pkg{OLAT} (as rendered by a \pkg{Firefox} browser).}
\end{figure}

The main difference of the generated ZIP file, compared to the \pkg{Moodle} version, is that it just
contains a single XML file (rather than exercise-specific XML files) for the whole
assessment. The QTI~1.2 standard allows for rather fine control of the properties
of the exercises (also known as items in QTI~1.2) and the exams (also known as assessments).
Hence, \code{exams2qti12()} provides a variety of options for controlling
the appearance of exam/exercises. Also, the underlying XML template could be
adapted and extended.


\section{Design} \label{sec:design}

\fixme{Briefly explain the idea that a new function xexams does the handling
of different driver functions.}

\subsection{Extended specification of exercises}

As discussed in Section~\ref{sec:usage} and illustrated in Figure~\ref{fig:Rnw}, each exercise
is simply an \code{Sweave} file containing \proglang{R} code for data generation,
\code{{question}}/\code{{solution}} environments with {\LaTeX} text, and
metainformation about the type of exercise and the correct solution etc. This
design was introduced by \cite{exams:Gruen+Zeileis:2009} but is somewhat extended
in the new version to provide some more options for the generation of e-learning exams.
See Table~\ref{tab:metainfo} for an overview for a list of exercise types and
corresponding metainformation commands.

\begin{table}[t!]
\centering
\begin{tabular}{lp{11.8cm}} \hline
Command & Description \\ \hline
\verb|\extype{}|      & Specification of the type of exercise (required): \code{num}
                        for questions with a numeric answer, \code{mchoice} for questions
			with multiple-choice answers, \code{schoice} for questions with
			single-choice answers (i.e., multiple-choice with exactly one correct
			solution), \code{string} for questions with a (short) text answer, or
			\code{cloze} for cloze solutions (i.e., combinations of the above). \\
\verb|\exname{}|      & Short name/description (to be used for printing within \proglang{R}). \\
\verb|\extitle{}|     & Pretty longer title. \\
\verb|\exsection{}|   & Section of the exercise (with slashes for subsections as in a URL). \\
\verb|\exversion{}|   & Version of the exercise. \\ \hline
\verb|\exsolution{}|  & Correct solution (required). It must contain a numeric solution for \code{num},
                        a string of zeros/ones for \code{mchoice}/\code{schoice}, or a character
			string of \code{string}. For \code{cloze} a combination of these can
			be specified, e.g., \verb|\exsolution{1.23}{0}{median}|. \\
\verb|\extolerance{}| & Tolerance limits (of length~1 or~2) for \code{num} solutions. If unspecified
                        the tolerance is 0. For length~2, the lower and upper tolerance can be
			specified separately.\\
\verb|\exclozetype{}| & List of types for the elements of a \code{cloze} exercise, e.g.,
                        \verb|\exclozetype{num}{mchoice}{string}| for the example above. \\ \hline
\verb|\expoints{}|    & Default points for correct solution. \\
\verb|\extime{}|      & Default time (in seconds) for solution. \\
\verb|\exshuffle{}|   & Logical indicating whether \code{mchoice}/\code{schoice}
                        answers should be shuffled (in \pkg{Moodle} or other e-learning systems). \\
\verb|\exsingle{}|    & Logical indicating whether radio buttons should be used in \pkg{Moodle}. \\ \hline
\end{tabular}
\caption{\label{tab:metainfo} Overview of metainformation commands in exercises. The commands in the
  first section allow for a general description, those in the section section for question/answer
  specification, and those in the last section for customization in e-learning environments. Only
  \texttt{extype} and \texttt{exsolution} are always required (but \texttt{exname} is recommended
  additionally for nice printing in \proglang{R}).}
\end{table}

Each exercise must specify at least an \verb|\extype{}| and an \verb|\exsolution{}| and
should typically also have a short \verb|\exname{}|. There are now five different \code{extype}s.
Two types that have a single question and answer:
\begin{itemize}
  \item \code{num} for questions with a numeric answer, e.g., \verb|\exsolution{1.23}|.
  \item \code{string} for questions with a (short) text answer, e.g., \verb|\exsolution{median}|.
\end{itemize}
Three types have a list of questions (or statements)
\begin{itemize}
  \item \code{mchoice} for multiple-choice questions where each element of the
    question/statement can either be true or false, e.g., \verb|\exsolution{01011}|.
  \item \code{schoice} for single-choice questions where exactly one of the
    questions/statements is true and all others are false, e.g., \verb|\exsolution{01000}|.
  \item \code{cloze} for a combination of questions/statements with \code{num},
    \code{string}, or \code{mchoice} answers. Thus, each element of the question
    has either a numeric, short text, or logical answer, e.g., \verb|\exsolution{1.23}{0}{median}|.
    For \code{cloze} types an extra \code{clozetype} has to be specified, e.g.,
    \verb|\exclozetype{num}{mchoice}{string}|.    
    \fixme{Support for longer mchoice answers through answer groups -- at least for Moodle?}
\end{itemize}
The types \code{schoice} and \code{mchoice} have been newly introduced. The purpose
of the former is mainly to allow for different processing of options (e.g., for
assigning points to correct/wrong results) between \code{mchoice} and \code{schoice}.
The \code{cloze} type was introduced because both \pkg{Moodle} and QTI~1.2 have
support for it (albeit in slightly different ways, for details see below).

For the three types with lists of questions (\code{mchoice}, \code{schoice}, \code{cloze}),
the \code{{question}} and \code{{solution}} environments should each contain at the end
an \code{{answerlist}} environment. In the \code{{question}} this should list an \verb|\item|
for each question/statement and in the \code{{solution}} the corresponding answers/explanations
can be provided. The \code{{answerlist}} environment can either be written as usual (typically
leveraging \verb|\|\verb|Sexpr{}|) or by using the \code{answerlist()} function provided
by the \pkg{exams} package. For illustration, we set up a multiple-choice question with
three statements about Switzerland. First, we generate an \code{{answerlist}} for the
\code{{question}}.
<<answerlist-question>>=
qu <- c("Zurich is the capital of Switzerland.",
        "Italian is an official language in Switzerland.",
        "Switzerland is part of the European Union (EU).")
answerlist(qu)
@
Then the corresponding \code{{answerlist}} for the \code{{solution}} is set up.
<<answerlist-solution>>=
sol <- c(FALSE, TRUE, FALSE)
ex <- c("The capital of Switzerland is Bern.",
        "The official languages are: German, French, Italian, Romansh.",
        "Switzerland is part of the Schengen Area but not the EU.")
answerlist(ifelse(sol, "True", "False"), ex)
@

For more examples see the exercise files in the \code{inst/exercises} directoy
of the \pkg{exams} source package. There are various multiple-choice questions
with and without figures and/or verbatim \proglang{R} output (e.g., \code{anova},
\code{boxplots}, \code{cholesky}, amoung others). The files \code{tstat} and
\code{tstat2} illustrate how the same type of exercise can be coded as a
\code{num} or \code{schoice} question, respectively. The \code{cloze} type
is employed in \code{boxhist}.


\subsection[The xexams() wrapper function]{The \code{xexams()} wrapper function}

\code{xexams}

drivers to \code{sweave}, \code{read}, \code{transform}, \code{write}

we provide some drivers (e.g., \code{read_exercise}) as well as various
driver generators (e.g., \code{make_exercise_transform_html})

for example for \code{exams2html}:
\begin{enumerate}
  \item \code{sweave:} \code{Sweave()} is called with \code{pdf = FALSE} and
    \code{png = TRUE} and (by default) with \code{quiet = TRUE}, \code{resolution = 100},
    \code{width = 4}, \code{height = 4}.
  \item \code{read}: \code{read_exercise()}.
  \item \code{transform}: \code{make_exercise_transform_html(...)}.
  \item \code{write}: \code{make_exams_write_html(template = "plain", ...)}.
\end{enumerate}


return value is nested list (Figure~\ref{fig:xexam}), currently not classed

\begin{figure}[t!]
\hrulefill
\begin{Code}
list(               ## of 'exams', length: n
  list(             ## of 'exercises', length: k
    list(           ## of exercise content, length: 6
      question,
      questionlist,
      solution,
      solutionlist,
      metainfo,
      supplements
    )
  )
)
\end{Code}
\hrulefill
\caption{\label{fig:xexam} Structure of the return value of \code{xexams}.}
\end{figure}

\subsection[The read driver: read_exercise() and read_metainfo()]{The \code{read} driver: \code{read\_exercise()} and \code{read\_metainfo()}}

\subsection[LaTeX-to-HTML transform driver generator]{{\LaTeX}-to-HTML \code{transform} driver generator} \label{sec:transform_html}

\code{make_exercise_transform_html()}

\pkg{TtH} \citep{exams:Hutchinson:2012} with \proglang{C}~functions \code{tth} ({\TeX} to HTML), \code{ttm} ({\TeX} to HTML/MathML)

\proglang{R} package \pkg{tth} \citep{exams:Hutchinson+Leisch+Zeileis:2012} with suitable \proglang{R} wrapper functions

\code{tex2image()} which runs \code{texi2dvi()} from the base \proglang{R} package \pkg{tools}
and subsequently converts the resulting PDF to a raster image using a \code{system()} call to
\pkg{ImageMagick}'s \code{convert} function \citep{exams:ImageMagick:2012}. Thus, for this function
\pkg{ImageMagick} is assumed to be installed and in the search path.

images can either be part of the supplementary files or embedded directly in the HTML code
using Base64 encoding \citep[via the \pkg{base64enc} package in \proglang{R}][]{exams:Urbanek:2012}

Displaying MathML in web pages has become very easy: \pkg{Firefox} long had native support for MathML and
for the Microsoft \pkg{Internet Explorer} the \pkg{MathPlayer} plugin \citep{exams:MathPlayer:2012} has
long been available. Meanwhile, other major browsers like Google \pkg{Chrome}, \pkg{Opera}, or \pkg{Safari}
also support MathML \citep[Section~1.2][]{exams:Vismor:2012}. Furthermore, \pkg{MathJax}
\citep{exams:MathJax:2012}, an open-source \proglang{JavaScript} engine, can be used to render
MathML formulas on a server rather than in the local browser.


\subsection[PDF and HTML write driver generators]{PDF and HTML \code{write} driver generators}

\subsection[Further functions for processing xexams return values]{Further functions for processing \code{xexams} return values}

\code{exams2moodle}, \code{exams2qti12}

mention MathML display of matrices within OLAT

\section[Extending the exams toolbox and writing new drivers]{Extending the \pkg{exams} toolbox and writing new drivers} \label{sec:extensions}

use \code{exams2wu} for illustration?


\section{Discussion and summary} \label{sec:discussion}

infrastructure vs.\ content

strategies for setting up exercises

experiences at Universit\"at Innsbruck




\section*{Acknowledgments}

We are indebted to our colleagues at the Department of Statistics
at Universit\"at Innsbruck for testing and challenging the code and making
suggestions for improvement. This project was also partially supported
by an e-learning grant by the Universit\"at Innsbruck. \fixme{Does this
have a reference/number?}

\bibliography{exams}

\end{document}
