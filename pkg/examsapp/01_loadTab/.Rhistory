Function read in the sample size (a natural number without zero) given by the user.
@return: the sample size
"
getSampleSize <- function(){
n = -1
while(n < 1 || n%%1 != 0){
n = as.numeric(readline(prompt = "Please state the sample size (a natural number): "))
}
return(as.numeric(n))
}
"
Function computes the random numbers and calculates the sample mean and variance.
@param matrixResults: data matrix to be completed with new data
@return: matrix with the all data
"
calculateMeanVariance <- function(matrixResults){
rng = getGenerator()
RNGkind(rng)
sampleSize = getSampleSize()
binomVec = rbinom(sampleSize, 20, 0.2)
sampleMean = mean(binomVec)
sampleVariance = var(binomVec)
matrixResults = rbind(matrixResults, c(rng, sampleSize, sampleMean, 20*0.2, sampleVariance, 20*0.2*0.8))
return(matrixResults)
}
# create matrix to collect data
matrixResults = matrix("-", nrow = 1,ncol=6)
colnames(matrixResults) = c("generator", "sample size", "sample mean", "expected value", "sample variance", "variance")
#start endless loop
while(1){
print(matrixResults)
matrixResults = calculateMeanVariance(matrixResults)
}
Program read in a natural number and an random number generator. Calculates binomial distributet numbers
with n = 20 and p = 0.2. Computes sample mean and variance. All the data is collected in a table.
Program has an infinite loop.
"
"
Function prints the list of random number generators on console. User can choose a generator by typing in
the number. Function checks, that the number is between 1 and the number of random number generators.
@return: the name of the number generator
"
getGenerator <- function(){
genId = -1
generators = c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper", "Mersenne-Twister", "Knuth-TAOCP-2002")
colnames(generators) = c("id", "generator name")
chooseGenerator = matrix(c(seq(1, length(generators)),generators), nrow = length(generators), ncol=2)
while(genId < 1 || genId > length(generators)){
print(chooseGenerator)
genId = as.numeric(readline(prompt = "Please choose generator: "))
}
return(generators[genId])
}
"
Function read in the sample size (a natural number without zero) given by the user.
@return: the sample size
"
getSampleSize <- function(){
n = -1
while(n < 1 || n%%1 != 0){
n = as.numeric(readline(prompt = "Please state the sample size (a natural number): "))
}
return(as.numeric(n))
}
"
Function computes the random numbers and calculates the sample mean and variance.
@param matrixResults: data matrix to be completed with new data
@return: matrix with the all data
"
calculateMeanVariance <- function(matrixResults){
rng = getGenerator()
RNGkind(rng)
sampleSize = getSampleSize()
binomVec = rbinom(sampleSize, 20, 0.2)
sampleMean = mean(binomVec)
sampleVariance = var(binomVec)
matrixResults = rbind(matrixResults, c(rng, sampleSize, sampleMean, 20*0.2, sampleVariance, 20*0.2*0.8))
return(matrixResults)
}
# create matrix to collect data
matrixResults = matrix("-", nrow = 1,ncol=6)
colnames(matrixResults) = c("generator", "sample size", "sample mean", "expected value", "sample variance", "variance")
#start endless loop
while(1){
print(matrixResults)
matrixResults = calculateMeanVariance(matrixResults)
}
Program read in a natural number and an random number generator. Calculates binomial distributet numbers
with n = 20 and p = 0.2. Computes sample mean and variance. All the data is collected in a table.
Program has an infinite loop.
"
"
Function prints the list of random number generators on console. User can choose a generator by typing in
the number. Function checks, that the number is between 1 and the number of random number generators.
@return: the name of the number generator
"
getGenerator <- function(){
genId = -1
generators = c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper", "Mersenne-Twister", "Knuth-TAOCP-2002")
chooseGenerator = matrix(c(seq(1, length(generators)),generators), nrow = length(generators), ncol=2)
colnames(chooseGenerator) = c("id", "generator name")
while(genId < 1 || genId > length(generators)){
print(chooseGenerator)
genId = as.numeric(readline(prompt = "Please choose generator: "))
}
return(generators[genId])
}
"
Function read in the sample size (a natural number without zero) given by the user.
@return: the sample size
"
getSampleSize <- function(){
n = -1
while(n < 1 || n%%1 != 0){
n = as.numeric(readline(prompt = "Please state the sample size (a natural number): "))
}
return(as.numeric(n))
}
"
Function computes the random numbers and calculates the sample mean and variance.
@param matrixResults: data matrix to be completed with new data
@return: matrix with the all data
"
calculateMeanVariance <- function(matrixResults){
rng = getGenerator()
RNGkind(rng)
sampleSize = getSampleSize()
binomVec = rbinom(sampleSize, 20, 0.2)
sampleMean = mean(binomVec)
sampleVariance = var(binomVec)
matrixResults = rbind(matrixResults, c(rng, sampleSize, sampleMean, 20*0.2, sampleVariance, 20*0.2*0.8))
return(matrixResults)
}
# create matrix to collect data
matrixResults = matrix("-", nrow = 1,ncol=6)
colnames(matrixResults) = c("generator", "sample size", "sample mean", "expected value", "sample variance", "variance")
#start endless loop
while(1){
print(matrixResults)
matrixResults = calculateMeanVariance(matrixResults)
}
Program read in a natural number and an random number generator. Calculates binomial distributet numbers
with n = 20 and p = 0.2. Computes sample mean and variance. All the data is collected in a table.
Program has an infinite loop.
"
"
Function prints the list of random number generators on console. User can choose a generator by typing in
the number. Function checks, that the number is between 1 and the number of random number generators.
@return: the name of the number generator
"
getGenerator <- function(){
genId = -1;
generators = c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper", "Mersenne-Twister", "Knuth-TAOCP-2002")
chooseGenerator = matrix(c(seq(1, length(generators)),generators), nrow = length(generators), ncol=2)
colnames(chooseGenerator) = c("id", "generator name")
while(genId < 1 || genId > length(generators)){
print(chooseGenerator)
genId = as.numeric(readline(prompt = "Please choose generator: "))
}
return(generators[genId])
}
"
Function read in the sample size (a natural number without zero) given by the user.
@return: the sample size
"
getSampleSize <- function(){
n = -1
while(n < 1 || n%%1 != 0){
n = as.numeric(readline(prompt = "Please state the sample size (a natural number): "))
}
return(as.numeric(n))
}
"
Function computes the random numbers and calculates the sample mean and variance.
@param matrixResults: data matrix to be completed with new data
@return: matrix with the all data
"
calculateMeanVariance <- function(matrixResults){
rng = getGenerator()
RNGkind(rng)
sampleSize = getSampleSize()
binomVec = rbinom(sampleSize, 20, 0.2)
sampleMean = mean(binomVec)
sampleVariance = var(binomVec)
matrixResults = rbind(matrixResults, c(rng, sampleSize, sampleMean, 20*0.2, sampleVariance, 20*0.2*0.8))
return(matrixResults)
}
# create matrix to collect data
matrixResults = matrix("-", nrow = 1,ncol=6)
colnames(matrixResults) = c("generator", "sample size", "sample mean", "expected value", "sample variance", "variance")
#start endless loop
while(1){
print(matrixResults)
matrixResults = calculateMeanVariance(matrixResults)
}
print(hy)
print("hy")
print("hy")
print("hy")
print("hy")
"
Program read in a natural number and an random number generator. Calculates binomial distributet numbers
with n = 20 and p = 0.2. Computes sample mean and variance. All the data is collected in a table.
Program has an infinite loop.
"
"
Function prints the list of random number generators on console. User can choose a generator by typing in
the number. Function checks, that the number is between 1 and the number of random number generators.
@return: the name of the number generator
"
getGenerator <- function(){
genId = -1
generators = c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper", "Mersenne-Twister", "Knuth-TAOCP-2002")
chooseGenerator = matrix(c(seq(1, length(generators)),generators), nrow = length(generators), ncol=2)
colnames(chooseGenerator) = c("id", "generator name")
while(genId < 1 || genId > length(generators)){
print(chooseGenerator)
genId = as.numeric(readline(prompt = "Please choose generator: "))
}
return(generators[genId])
}
"
Function read in the sample size (a natural number without zero) given by the user.
@return: the sample size
"
getSampleSize <- function(){
n = -1
while(n < 1 || n%%1 != 0){
n = as.numeric(readline(prompt = "Please state the sample size (a natural number): "))
}
return(as.numeric(n))
}
"
Function computes the random numbers and calculates the sample mean and variance.
@param matrixResults: data matrix to be completed with new data
@return: matrix with the all data
"
calculateMeanVariance <- function(matrixResults){
rng = getGenerator()
RNGkind(rng)
sampleSize = getSampleSize()
binomVec = rbinom(sampleSize, 20, 0.2)
sampleMean = mean(binomVec)
sampleVariance = var(binomVec)
matrixResults = rbind(matrixResults, c(rng, sampleSize, sampleMean, 20*0.2, sampleVariance, 20*0.2*0.8))
return(matrixResults)
}
# create matrix to collect data
matrixResults = matrix("-", nrow = 1,ncol=6)
colnames(matrixResults) = c("generator", "sample size", "sample mean", "expected value", "sample variance", "variance")
#start endless loop
while(1){
print(matrixResults)
matrixResults = calculateMeanVariance(matrixResults)
}
shiny::runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
file.rename("/tmp/Rtmpu8jJgM/file574626f569e/0.Rmd", "hi")
getwd()
file.rename("/downloads/orange.png", "apple.png")
file.rename("/Downloads/orange.png", "/Downloads/apple.png")
file.rename("home/julia/Downloads/orange.png", "home/julia/Downloads/apple.png")
file.rename("/home/julia/Downloads/orange.png", "/home/julia/Downloads/apple.png")
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
shiny::runApp('rProjectExams/01_loadTab')
library(readr)
guess_encoding("/01_loadTab/server.R", n= 1000)
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/server.R", n= 1000)
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R", n= 1000)
file.encoding("/home/julia/rProjectExams/01_loadTab/test.R")
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R", n= 1000)
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R")
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R", n_max = 1000)
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R", n_max = 1000)
stringi::stri_enc_detect2("/home/julia/rProjectExams/01_loadTab/test.R")
library(readr)
guess_encoding("/home/julia/rProjectExams/01_loadTab/test.R", n_max = 1000)
stringi::stri_enc_detect2("/home/julia/rProjectExams/01_loadTab/test.R")
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")[[1]]
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")[[1]][1]
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")[[1,1]]
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")[[1]][1,]
stringi::stri_enc_detect("/home/julia/rProjectExams/01_loadTab/test.R")[[1]][1,1]
install.packages("ngram")
test = readLines("test.txt")
tmpFile = tempfile("test.txt")
test = readLines(tmpFile)
tmpFile = read.file("test.txt")
test = readLines(tmpFile)
tmpFile = read.delim("test.txt")
getwd()
tmpFile = read.delim("/home/julia/Dokumente/Maste/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = read.delim("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = read.delim("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
test = readLines(tmpFile)
bg = ngram(tmpFile, n=2)
library(ngram)
tmpFile = read.delim("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
bg = ngram(tmpFile, n=2)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
bg = ngram(tmpFile, n=2)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile
bg = ngram(tmpFile, n=2)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile
bg = ngram(tmpFile, n=2)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
bg = ngram(tmpFile, n=2)
get.phrasetable(bg)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
bg = ngram(tmpFile, n=2)
get.phrasetable(bg)
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
mg = ngram(tmpFile, n=1)
bg = ngram(tmpFile, n=2)
tg = ngram(tmpFile, n=3)
get.phrasetable(bg)[1:10]
c(1:10)
get.phrasetable(bg)[c(1:10),]
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
mg = ngram(tmpFile, n=1)
bg = ngram(tmpFile, n=2)
tg = ngram(tmpFile, n=3)
get.phrasetable(mg)[c(1:10),]
get.phrasetable(bg)[c(1:10),]
get.phrasetable(tg)[c(1:10),]
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
mg = ngram(tmpFile, n=1)
bg = ngram(tmpFile, n=2)
tg = ngram(tmpFile, n=3)
get.phrasetable(mg)[c(1:10),]
get.phrasetable(bg)[c(1:10),]
get.phrasetable(tg)[c(1:10),]
get.phrasetable(mg)[c(1:10),c(1,3)]
get.phrasetable(mg)[c(1:10),c(3)]
library(ngram)
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
mg = ngram(tmpFile, n=1)
bg = ngram(tmpFile, n=2)
tg = ngram(tmpFile, n=3)
get.phrasetable(mg)[c(1:10),]
get.phrasetable(bg)[c(1:10),]
get.phrasetable(tg)[c(1:10),]
propMg = get.phrasetable(mg)[c(1:10),c(3)]
propBg = get.phrasetable(bg)[c(1:10),c(3)]
propTg = get.phrasetable(tg)[c(1:10),c(3)]
entropyMg = 0
entropyBg = 0
entropyTg = 0
for(i in 1:length(propMg)){
entropyMg = entropyMg + propMg[i]*log2(propMg[i])
entropyBg = entropyBg + propBg[i]*log2(propBg[i])
entropyTg = entropyTg + propTg[i]*log2(propTg[i])
}
entropyMg = entropyMg*(-1)
entropyBg = entropyBg*(-1)
entropyTg = entropyTg*(-1)
matrix(c("Entropie Monogram", "Entropie Bigram", "Entropie Trigram", entropyMg, entropyBg, entropyTg), nrow=3, ncol=2)
absTg = get.phrasetable(tg)[c(1:10),c(2)]
absMg = sum(get.phrasetable(mg)[c(1:10),c(2)])
absBg = sum(get.phrasetable(bg)[c(1:10),c(2)])
absTg = sum(get.phrasetable(tg)[c(1:10),c(2)])
absVal = absMg + absBg + absTg
ent1 = -(absMg/absVal)*log2(absMg/absVal)
propMg = get.phrasetable(mg)[c(1:10),c(2)]/sum(get.phrasetable(mg)[c(1:10),c(2)])
propBg = get.phrasetable(bg)[c(1:10),c(2)]/sum(get.phrasetable(bg)[c(1:10),c(2)])
propTg = get.phrasetable(tg)[c(1:10),c(2)]/sum(get.phrasetable(tg)[c(1:10),c(2)])
# compute entropy due to Satz 2.1
entropyMg = 0
entropyBg = 0
entropyTg = 0
for(i in 1:length(propMg)){
entropyMg = entropyMg + propMg[i]*log2(propMg[i])
entropyBg = entropyBg + propBg[i]*log2(propBg[i])
entropyTg = entropyTg + propTg[i]*log2(propTg[i])
}
entropyMg = entropyMg*(-1)
entropyBg = entropyBg*(-1)
entropyTg = entropyTg*(-1)
# Table to format the entropies in a nice way
matrix(c("Entropie Monogram", "Entropie Bigram", "Entropie Trigram", entropyMg, entropyBg, entropyTg), nrow=3, ncol=2)
entropyMg = entropyMg*(-1)
entropyBg = entropyBg*(-1)/2
entropyTg = entropyTg*(-1)/3
# Table to format the entropies in a nice way
matrix(c("Entropie Monogram/1", "Entropie Bigram/2", "Entropie Trigram/3", entropyMg, entropyBg, entropyTg), nrow=3, ncol=2)
propMg = get.phrasetable(mg)[c(1:10),c(2)]/sum(get.phrasetable(mg)[c(1:10),c(2)])
propBg = get.phrasetable(bg)[c(1:10),c(2)]/sum(get.phrasetable(bg)[c(1:10),c(2)])
propTg = get.phrasetable(tg)[c(1:10),c(2)]/sum(get.phrasetable(tg)[c(1:10),c(2)])
# compute entropy due to Satz 2.1
entropyMg = 0
entropyBg = 0
entropyTg = 0
for(i in 1:length(propMg)){
entropyMg = entropyMg + propMg[i]*log2(propMg[i])
entropyBg = entropyBg + propBg[i]*log2(propBg[i])
entropyTg = entropyTg + propTg[i]*log2(propTg[i])
}
entropyMg = entropyMg*(-1)
entropyBg = (entropyBg*(-1))/2
entropyTg = (entropyTg*(-1))/3
# Table to format the entropies in a nice way
matrix(c("Entropie Monogram/1", "Entropie Bigram/2", "Entropie Trigram/3", entropyMg, entropyBg, entropyTg), nrow=3, ncol=2)
propMg = get.phrasetable(mg)[c(1:10),c(2)]
propMg = get.phrasetable(mg)[c(1:10),c(3)
propMg = get.phrasetable(mg)[c(1:10),c(3)]
propMg = get.phrasetable(mg)[c(1:10),c(3)]
e1 = -(propMg/propVal * log2(propMg/propVal))
propMg = sum(get.phrasetable(mg)[c(1:10),c(2)])
propBg = sum(get.phrasetable(bg)[c(1:10),c(2)])
propTg = sum(get.phrasetable(tg)[c(1:10),c(2)])
propVal = propMg + propBg + propTg
e1 = -(propMg/propVal * log2(propMg/propVal))
e2 = -(propMg/propVal * log2(propMg/propVal) + propBg/propVal * log2(propBg/propVal))/2
library(ngram)
# read in file and process it (only 26 letters and space are allowed)
# file location must be changed
tmpFile = readLines("/home/julia/Dokumente/Master/PS_InformationstheorieUndKryptologie/test.txt")
tmpFile = concatenate(tmpFile)
tmpFile = preprocess(tmpFile, remove.punct = TRUE, remove.numbers = TRUE)
tmpFile = splitter(tmpFile, split.space=FALSE, split.char=TRUE)
# compute the ngrams of the file
mg = ngram(tmpFile, n=1)  # monograms
bg = ngram(tmpFile, n=2)  # bigrams
tg = ngram(tmpFile, n=3)  # trigrams
# print 10 most ngrams
get.phrasetable(mg)[c(1:10),]
get.phrasetable(bg)[c(1:10),]
get.phrasetable(tg)[c(1:10),]
# get only the relative frequency to compute entropy
propMg = get.phrasetable(mg)[c(1:10),c(2)]/sum(get.phrasetable(mg)[c(1:10),c(2)])
propBg = get.phrasetable(bg)[c(1:10),c(2)]/sum(get.phrasetable(bg)[c(1:10),c(2)])
propTg = get.phrasetable(tg)[c(1:10),c(2)]/sum(get.phrasetable(tg)[c(1:10),c(2)])
# compute entropy due to Satz 2.1
entropyMg = 0
entropyBg = 0
entropyTg = 0
for(i in 1:length(propMg)){
entropyMg = entropyMg + propMg[i]*log2(propMg[i])
entropyBg = entropyBg + propBg[i]*log2(propBg[i])
entropyTg = entropyTg + propTg[i]*log2(propTg[i])
}
entropyMg = entropyMg*(-1)
entropyBg = (entropyBg*(-1))/2
entropyTg = (entropyTg*(-1))/3
# Table to format the entropies in a nice way
matrix(c("Entropie Monogram/1", "Entropie Bigram/2", "Entropie Trigram/3", entropyMg, entropyBg, entropyTg), nrow=3, ncol=2)
shiny::runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
Q
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
runApp('rProjectExams/01_loadTab')
