\documentclass[nojss]{jss}
%% \usepackage{thumbpdf}
%% need no \usepackage{Sweave}

%% new environments for exams
\newenvironment{question}{\item \textbf{Problem}\newline}{}
\newenvironment{solution}{\textbf{Solution}\newline}{}

\author{Bettina Gr\"un\\Wirtschaftsuniversit\"at Wien
   \And Achim Zeileis\\Wirtschaftsuniversit\"at Wien}
\Plainauthor{Bettina Gr\"un, Achim Zeileis}

\title{Automatic Generation of Simple (Statistical) Exams}

\Keywords{exams, multiple choice, arithmetic problems, Sweave, {\LaTeX}, \proglang{R}}
\Plainkeywords{exams, multiple choice, arithmetic problems, Sweave, LaTeX, R}

\Abstract{
  Package \pkg{exams} provides a framework for automatic
  generation of simple (statistical) exams. To employ the tools,
  users just need to supply a pool of exercises and
  a master file controlling the layout of the final PDF document.
  The exercises are specified in
  separate Sweave files (containing \proglang{R} code for data
  generation and {\LaTeX} code for problem and solution description)
  and the master file is a {\LaTeX} document with some additional control
  commands.  This paper gives an overview on
  the main design aims and principles as well as strategies for adaptation
  and extension. Hands-on illustrations---based on example exercises and control files
  provided in the package---are presented to get new users started easily.
}

\Address{
  Bettina Gr\"un, Achim Zeileis\\
  Department of Statistics and Mathematics\\
  Wirtschaftsuniversit\"at Wien\\
  Augasse 2--6\\
  A-1090 Wien, Austria\\
  E-mail: \email{Bettina.Gruen@wu-wien.ac.at}, \email{Achim.Zeileis@R-project.org}\\
  URL: \url{http://statmath.wu-wien.ac.at/~gruen/},\\
  \phantom{URL:} \url{http://statmath.wu-wien.ac.at/~zeileis/}
}

\begin{document}

\SweaveOpts{engine = R, eps = FALSE, keep.source = TRUE}
%\VignetteIndexEntry{Automatic Generation of Simple (Statistical) Exams}
%\VignetteDepends{stats, graphics, tools, utils}
%\VignetteKeywords{exams, multiple choice, arithmetic problems, Sweave, LaTeX, R}
%\VignettePackage{exams}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 70, prompt = "R> ", continue = "+  ")
library("exams")
combine <- function(x, sep, width) {
  cs <- cumsum(nchar(x))
  remaining <- if (any(cs[-1] > width)) combine(x[c(FALSE, cs[-1] > width)], sep, width)
  c(paste(x[c(TRUE, cs[-1] <= width)], collapse= sep), remaining)
}
prettyPrint <- function(x, sep = " ", linebreak = "\n\t", width = getOption("width")) {
  x <- strsplit(x, sep)[[1]]
  paste(combine(x, sep, width), collapse = paste(sep, linebreak, collapse = ""))
}
print.exams_metainfo <- 
function (x, which = NULL, width = getOption("width"), ...) 
{
    which <- if (is.null(which)) 
        names(x)
    else {
        if (is.numeric(which)) 
            names(x)[which]
        else which
    }
    n <- length(x[[1]])
    for (i in which) {
        cat("\n", i, "\n", sep = "")
        for (j in 1:n) {
            cat("    ", format(c(n, j))[-1], ". ", 
                prettyPrint(x[[i]][[j]]$string, width = width - 4 - ceiling(log(1 + n, 10))),
                "\n", sep = "")
        }
    }
    cat("\n")
    invisible(x)
}
@

\section{Introduction} \label{sec:intro}

The introductory statistics lecture at the Wirtschaftsuniversit\"at
Wien (WU Wien, \url{http://www.wu-wien.ac.at/}), Vienna, Austria, is
attended each semester by about 1,000--1,500 students (mostly first-year
business students). Several lecturers from the Department of
Statistics and Mathematics teach this course in parallel. The
\pkg{exams} package was written as part of a collaborative department
initiative to re-design the course format for this lecture, ensuring
an efficient, consistent, and transparent organization. The re-design
covered all aspects of teaching materials, i.e., new presentation
slides, collections of exercises, exams, etc. The main challenges in
this process---that the \pkg{exams} package tries to address---were:
\begin{itemize}
  \item \textit{Scalable exams:} Automatic generation of a large number
        of different exams.
  \item \textit{Associated self-study materials:} Collections of exercises
        and solutions from the same pool of examples.
  \item \textit{Joint development:} Development and maintenance of a large
        pool of exercises in a multi-author and cross-platform setting.
\end{itemize}
Specifically, at WU Wien about 10--15 lecturers were working in small 
teams of 2--4 people on different chapters for the presentation slides.
For each chapter, the corresponding team would also provide suitable
exercise templates that could be used for self-study materials, exams, and solutions.

Prior experience had shown that the exercises needed to be flexible in
order to allow for enough variation and avoid ``learning by
heart'': Students should not be able to guess the correct answer of a
multiple choice question from a certain key word in the problem
description. Ideally for each problem setting a set of exercises
should exist where all combinations of possible answers are
correct. In addition, the exercises should not only require students
to do calculations but also cover interpretation of results,
statistical graphics and statistical software output. However, fast and
easy correction should still be possible based only on a short
result as filled in by the students on the cover sheet of their exams.

These requirements on maintenance, variation, and correction of exercises
led to the following design principles for package \pkg{exams}:
\begin{itemize}
  \item \textit{Maintenance:} Each exercise template is a single file
        (also just called ``exercise'').
  \item \textit{Variation:} Exercises are dynamic documents, containing a
        problem/solution along with a data-generating process (DGP) so that
	random samples can be drawn easily.
  \item \textit{Correction:} Solutions for exercises are either multiple-choice
        answers (logical vectors) or numeric values (e.g., a test statistic
	or a confidence interval).
\end{itemize}
Thus, the DGP of an exercise controls the distribution of possible
solutions and can be utilized to make them (approximately) evenly
distributed and difficult to ``guess'' or ``learn by heart''.  In
addition to the variability within an exercise, one can add further
variation by providing several exercise templates for the same type of
problem. Depending on the flexibility of the DGP, the pool of
exercises can thus be rather small or needs to be somewhat larger.

Mixing problems/solutions and DGPs for exam generation poses challenges 
that are similar to those of making data analyses reproducible.
Thus, \pkg{exams} employs many ideas from literate data analysis
\citep{exams:Rossini:2001,exams:Leisch+Rossini:2003}, literate programming
\citep{exams:Knuth:1992} and reproducible research \citep{exams:deLeeuw:2001}. 
Specifically, it makes extensive use of Sweave \citep{exams:Leisch:2002a}
for mixing DGPs written in the \proglang{R} system for statistical computing
\citep{exams:R:2008} and problem/solution descriptions written in
the typesetting system {\LaTeX} \citep{exams:Knuth:1984,exams:Lamport:1994}. 
Thus, the implementation in \pkg{exams} is based on
(1)~independent Sweave files for each exercise interweaving \proglang{R} and {\LaTeX} code,
(2)~different master {\LaTeX} files controlling the appearance and
(3)~an implementation of a minimal markup for communication with \proglang{R}
plus \proglang{R} functions tying everything together. 

In the development process at WU Wien, this addressed all requirements:
All lecturers involved are familiar with \proglang{R} and {\LaTeX}
(which are both available on all standard platforms) and can thus contribute to the
pool of exercises. To do so, they just need to know the structure of the exercise
Sweave files while different master {\LaTeX} files (for the department's 
exams, exercise collections, etc.) have been written by the authors of
the \pkg{exams} package. To provide all lecturers involved with access
to all resources, \pkg{Subversion} \citep[SVN,][]{exams:Pilato+Collins-Sussman+Fitzpatrick:2004}
is used for version control. This approach proved to be rather successful
in addressing the needs of multi-author and cross-platform development.

The package \pkg{exams} that emerged from the developments at WU Wien
is now available from the Comprehensive \proglang{R} Archive Network
at \url{http://CRAN.R-project.org/package=exams}. To utilize it for
exam generation, users need to generate a pool of exercises and supply
a master {\LaTeX} file. The package provides several examples for both
types of files along with documentation (like this paper) and hands-on
examples to get new users started. Hence, the remainder of this paper
is organized as follows: Section~\ref{sec:exercises} explains the
structure of the Sweave files defining the exercises and demonstrates
how the final output file is derived from the original \proglang{R}
and {\LaTeX} code. In Section~\ref{sec:master}, the structure of the
master {\LaTeX} file for constructing the final PDF file from the
exercise files is presented. Finally Section~\ref{sec:customization}
illustrates how to use the package in practice and how exams can be
customized.  Section~\ref{sec:discussion} concludes the paper with a
discussion.

\section{Exercises} \label{sec:exercises}

Each exercise is contained in a separate Sweave file and typically
represents an exemplary application of a statistical procedure.  It
needs to contain (1)~a question and a solution description which are
encapsulated in {\LaTeX} environments of the corresponding names and
(2)~some meta-information about the exercise such as type and the
solution.  To allow for variability, the data for the exercise can be
generated within the Sweave file in a code chunk (typically suppressed
in the final document). Meta-information for the examples needs to be
provided, e.g., for computing with the solution within \proglang{R} or
for generating lists with solutions.

In Table~\ref{tab:Rnw}, the Sweave file for a simple exercise asking
students to compute a one-sample $t$~test statistic is shown for
illustration. The four different blocks (\proglang{R} code with DGP,
\code{question} environment, \code{solution} environment,
meta-information) can easily be distinguished. The {\LaTeX} file
generated from a call to \code{Sweave()} is shown in
Table~\ref{tab:tex}, and the final compiled PDF output is provided in
Table~\ref{tab:pdf}.

The \proglang{R} code for the DGP is used as in any other Sweave
document: The code chunk is framed by \verb|<<>>=| and \code{@} and
options in the header control formatting (typically suppressing the
display in the final document, as in this example). For further
information about the application of Sweave and a detailed description
of the different options see
\cite{exams:Leisch:2008a,exams:Leisch:2008}.

The core of an exercise are two blocks for the question and the
solution in their accordingly named environments. The values generated
by the DGP are typically included using \verb|\|\verb|Sexpr{}|
statements. Furthermore, question/solution might contain graphics and/or
\proglang{R} output created by Sweave. To include the {\LaTeX} output
(see Table~\ref{tab:tex}) in some master {\LaTeX} file, this needs to define
the \code{question} and \code{solution} environment. This mechanism can be
used to control the display, e.g., to suppress the solution in an exam
but to display it in associated self-study material
(see Section~\ref{sec:master} for further details).

%% from Rnw
\begin{table}[p!]
\begin{center}
\makebox[\textwidth]{\hrulefill}

<<echo=FALSE, results=tex>>=
invisible(file.copy(system.file("exercises", "tstat.Rnw", package = "exams"), "tstat.Rnw"))
Rnw <- readLines("tstat.Rnw")
cat(c("\\begin{verbatim}", Rnw, "\\end{verbatim}"), sep = "\n")
@

\makebox[\textwidth]{\hrulefill}
\caption{\label{tab:Rnw} A simple Sweave exercise: \code{tstat.Rnw}.}
\end{center}
\end{table}

%% to LaTeX
\begin{table}[t!]
\begin{center}
\makebox[\textwidth]{\hrulefill}

<<echo=FALSE, results=hide>>=
set.seed(1090)
Sweave("tstat.Rnw")
tex <- readLines("tstat.tex")
file.remove(c("tstat.Rnw", "tstat.tex"))
@
<<echo=FALSE, results=tex>>=
cat(c("\\begin{verbatim}", tex, "\\end{verbatim}"), sep = "\n")
@

\makebox[\textwidth]{\hrulefill}
\caption{\label{tab:tex} {\LaTeX} output of \code{Sweave("tstat.Rnw"}).}
\end{center}
\end{table}

%% to PDF
\begin{table}[t!]
\makebox[\textwidth]{\hrulefill}
\begin{enumerate}

<<echo=FALSE, results=tex>>=
cat(tex, sep = "\n")
@

\end{enumerate}
\makebox[\textwidth]{\hrulefill}
\begin{center}
\caption{\label{tab:pdf} Display of processed \code{tstat} exercise.}
\end{center}
\end{table}

Finally, some meta-information needs to be provided. All meta-information
commands are in {\LaTeX} style but are actually commented out and hidden in the final
output file. There are four commands:
\begin{itemize}
  \item \verb|\extype{}|: type of question. It may be either \code{mchoice}
        for multiple choice questions or \code{num} for questions with a
        numeric result.
  \item \verb|\exsolution{}|: solution. It contains the numeric solution or
        a string of zeros and ones for multiple choice questions. For
	confidence intervals, it may also specify two solutions of type
        \verb|\exsolution{|\emph{lower}\verb|}{|\emph{upper}\verb|}|.	
  \item \verb|\exname{}|: a name or description. This is some
        short informative text, only used for printing of solutions
	within \proglang{R}.
      \item \verb|\extol{}|: tolerance limit (optional). For numeric
        solutions a tolerance limit can be specified; by default it is
        assumed to be 0.  This can be useful for automatic evaluations
        of numeric solutions if some deviation from the correct answer
        is allowed (e.g., due to rounding errors).
\end{itemize}

The user does not have to go from the Sweave file (Table~\ref{tab:Rnw})
to the {\LaTeX} file (Table~\ref{tab:tex}) to the PDF file (Table~\ref{tab:pdf})
``by hand''. The function \code{exams()} from package \pkg{exams} carries
out all of these steps automatically and returns a suitable \proglang{R}
object with the meta-information invisibly.
%
<<>>=
library("exams")
set.seed(1090)
tstat_sol <- exams("tstat.Rnw")
@ 
%
After loading the package, \code{exams()} is called with the Sweave file name.
The final PDF file is displayed on screen by default (for further options see
Section~\ref{sec:customization}). The PDF viewer used depends on the operating
system: On Windows, the application specified in the system's file
associations is used. On other systems (e.g., Linux or Mac OS),
the PDF viewer specified in the options (see \code{getOption("pdfviewer")})
is started. \code{exams()} returns an object of class
``\code{\Sexpr{class(tstat_sol)}}'' invisibly, which contains
the meta-information provided in the exercise. Its \code{print()} method displays
the information provided:
%
<<>>=
tstat_sol
@ 

\section[Combining exercises: The master LaTeX file]{Combining
  exercises: The master {\LaTeX} file} \label{sec:master}

To produce the PDF for an exam, the exercises need to be weaved,
tied together in the master {\LaTeX} file and subsequently processed
to PDF. More precisely, \code{exams()} takes the following approach: 
\begin{enumerate}
  \item Collect all Sweave files for the exercises, the master {\LaTeX}
        file(s) and potentially  additionally specified input files.
  \item Copy all files to a (temporary, by default) directory.
  \item Run \code{Sweave()} for each exercise.
  \item Produce a copy of the master {\LaTeX} file(s) in which certain
    control structures are substituted by dynamically generated
    {\LaTeX} commands (e.g., for including the exercises).
  \item Run \code{texi2dvi()} for each master {\LaTeX} file.
  \item Store the resulting PDF file(s) in an output directory
        or display it on the screen (for a single file only, by default).
\end{enumerate}
Thus, the only thing needed to combine several independent exercises
to an exam is a master {\LaTeX} file. Its basic structure is quite
straightforward but for more elaborate layouts it can become
more complex. Package \pkg{exams} provides various examples of master
{\LaTeX} files in the \code{inst/tex/} directory of the source package.
The simplest one is \code{plain.tex} (see Table~\ref{tab:master})
which is described here to provide a first overview.

\begin{table}[t]
\begin{center}
\makebox[\textwidth]{\hrulefill}

<<echo=FALSE, results=tex>>=
tex <- readLines(system.file("tex", "plain.tex", package = "exams"))
cat(c("\\begin{verbatim}", tex, "\\end{verbatim}"), sep = "\n")
@

\makebox[\textwidth]{\hrulefill}
\caption{\label{tab:master} A simple master {\LaTeX} file: \code{plain.tex}.}
\end{center}
\end{table}

The structure of \code{plain.tex} is rather straightforward:
First, the document class is defined and then necessary add-on
packages are loaded.\footnote{Note that \code{Sweave.sty} is included for
displaying \proglang{R} output. \code{texi2dvi()} ensures that this style
file will be found by including \proglang{R}'s \code{texmf} directory in the
\code{TEXINPUTS} path.}
Then the environments for \code{question} and \code{solution} are defined
(as part of an itemize or enumerate list). Finally, the document starts
and consists only of an enumerate list. In Step~4 of the algorithm described above,
the control command \verb|%% \exinput{exercises}| is replaced by
(a sequence of) \verb|\input{|{\it filename}\verb|}|, e.g., \verb|\input{tstat.tex}|
in our basic example from the previous section.

Thus, all appearance options can be controlled in the {\LaTeX} code of
the master file, e.g., by changing the definitions of the \code{question}/\code{solution}
environments or by modifying the code around the \verb|\exinput{}| command.
As an example, one might want to show only the questions and hide the
solutions in the PDF. This is easily obtained by changing the definition
of the \code{solution} environment to
\verb|\newenvironment{solution}{\comment}{\endcomment}|.

<<echo=FALSE, results=hide>>=
tstat_char <- strsplit(gsub("\\.", "", as.character(tstat_sol[[1]][[1]]$solution)), "")[[1]]
tstat_exnum <- rep("", 9)
tstat_exnum[(10 - length(tstat_char)):9] <- tstat_char
tstat_exnum <- paste("{", tstat_exnum, "}", sep = "", collapse = "")
@

The structure described so far is completely static, except for the
\verb|\exinput{}| command. In fact, \code{exercises} is not the only argument
allowed; at the moment two further arguments
can be used to modify aspects of the master {\LaTeX} file dynamically:
\begin{itemize}
\item \verb|\exinput{exercises}|: Inclusion of exercises.\\
      Replaced by: \verb|\input{|{\it filename}\verb|}| (one for each exercise).\\
      Example: \verb|\input{tstat}|.
\item \verb|\exinput{questionnaire}|: Inclusion of questionnaires, e.g., for cover sheets.\\
      Replaced by: \verb|\exnum{|{\it \dots}\verb|}| or
                   \verb|\exmchoice{|{\it \dots}\verb|}|, respectively (one for each exercise).\\
      Example: \verb|\exnum\Sexpr{tstat_exnum}|.
\item \verb|\exinput{header}|: Further commands and definitions.\\
      Replaced by: \verb|\|{\it command}\verb|{|{\it value}\verb|}| (one for each header command).\\
      Example: \verb|\Date{\Sexpr{Sys.Date()}}|.
\end{itemize}
For the latter two, the master {\LaTeX} file has to define the commands that are
used in the replacement step, e.g., \verb|\exnum| has to be a command that takes nine
arguments (corresponding to six and three digits before and after the decimal point for numeric
solutions) and \verb|\exmchoice| has to take five arguments (corresponding to the logical
multiple choice answers).\footnote{Note that this implementation
has the limitation that at most five answer options are possible for
multiple choice questions as well as only a precision up to three
digits right from the decimal mark and up to six digits left from the
decimal mark for numeric results is possible.}
For the header, arbitrary commands can be set up, see
Section~\ref{sec:customization} for details.

Two master {\LaTeX} files that illustrate all of the commands above are
provided in \pkg{exams}: \code{exam.tex} and \code{solution.tex}. \code{exam.tex} can be used
to generate exams including a cover sheet for students to fill in
their names as well as their answers to the problems (hiding solutions
for the exercises, obviously). \code{solution.tex} produces PDF files containing a
cover sheet similar to \code{exam.tex} but with the correct answers
already filled in. Furthermore, the \code{solution} environments are displayed
for each exercise.

\section[Application and customization: Function exams()]{Application
  and customization: Function \code{exams()}} \label{sec:customization}

In the simple case where only a single Sweave exercise is processed
running \code{exams()} essentially corresponds to first calling
\code{Sweave()} and then \code{texi2dvi()} on the file after
including it in a master {\LaTeX} file. This is quite convenient,
especially for non-experts (in \proglang{R} and/or {\LaTeX}), but
beyond that not much simplification is gained by \code{exams()}.
The main advantages of the function, however, are its flexibility
and customizability: It controls the (dynamic) combination of the
(static) Sweave and {\LaTeX} files and allows for
\begin{itemize}
\item construction of exams with stratified sampling of exercises,
\item automatic generation of multiple copies (potentially of
      multiple layouts) with suitable names and storage,
\item inclusion of a suitable cover page with answer fields,
\item collection of meta-information for problems and solutions in
      an \proglang{R} object.
\end{itemize}
In the following, we illustrate how \code{exams()} can be employed
to exploit all of these features. First, the interface of \code{exams()}
is briefly described before using it to generate a small set of exams
with corresponding solutions.

Function \code{exams()} has the following arguments:
\begin{verbatim}
<<results=tex, echo=false>>=
cat(prettyPrint(prompt(exams, filename = NA)$usage[[2]], sep = ", ", 
  linebreak = paste("\n", paste(rep(" ", nchar("exams") + 1), collapse = ""), sep= ""),
  width = 60))
@ 
\end{verbatim}
where \code{file} specifies a list/vector of exercise Sweave files
(see Section~\ref{sec:exercises}), \code{template} is the name of the
master {\LaTeX} file (see Section~\ref{sec:master}), and \code{n} is
the number of random replications. The remaining arguments control
details of the processing, e.g., the directories for input/output
files. A technical manual is available on the help page \code{?exams},
a brief hands-on introduction to selected arguments is given below:
\begin{description}
  \item[\normalfont \code{file}:] This is either a character vector containing the
        file names of Sweave exercises or a list of such vectors, e.g.,
<<>>=
myexam <- list("boxplots",
               c("confint", "ttest", "tstat"),
               c("anova", "regression"),
               "scatterplot",
               "relfreq")
@ 
	Exams generated from \code{myexam} always have five exercises: \code{"boxplots"},
	\code{"scatterplot"}, and \code{"relfreq"} are always included but the
	second exercise is randomly drawn from \code{"confint"}, \code{"ttest"},
	\code{"tstat"}. Similarly, the third exercise is randomly chosen from
	\code{"anova"} and \code{"regression"}. This stratified sampling strategy
	is useful if there are several exercises related to the same topic,
	or several exercises for the same statistical techniques with different
	``stories''. If only a single vector (rather than a list)
	of file names is specified, each exercise is always included in the final output file.       	
	The extension \code{.Rnw} can be omitted from the file names
        and the corresponding files should either be in the local directory,
        the \code{edir} directory or in the \code{exercises} directory of the
        installed package. 
  
  \item[\normalfont \code{n}:] Number of randomly generated exams.
  
  \item[\normalfont \code{dir}:] Output directory for storing the resulting PDF files (and
        meta-information). If only a single PDF file is generated, this can
	be omitted (and the result is displayed directly on the screen), otherwise
	it has to be specified. Below we use a temporary output directory
<<>>=
odir <- tempfile()
@
	but the reader can easily change \code{odir} to some local directory.

  \item[\normalfont \code{template}:] A (vector of) master {\LaTeX} file(s). If more than
        one \code{template} is specified, one PDF output file is created for
	each in each of the \code{n} runs. The extension \code{.tex} can be
	omitted in the file name and the corresponding files should either
	be in the local directory (or provided with the full path) or in the
	\code{tex} directory of the installed package.
	
  \item[\normalfont \code{header}:] Additional {\LaTeX} commands for
        replacement of \verb|\exinput{header}| in the master {\LaTeX}
        file.  It has to be a \code{list()} of \textit{command}\code{
        = }\textit{value} pairs, where \textit{value} can either be a
        static string or a function computing a string from the index
        $i$ of the $i$th exam. Below we use \code{ID = getID} with
<<>>=
getID <- function(i) 
  paste("myexam", gsub(" ", "0", format(i, width = 2)), sep = "")
getID(1)
@ 
        Thus, a different \verb|\ID{myexam|\textit{ii}\verb|}| command
	will be substituted in the header of each exam.	(The {\LaTeX}
	command \verb|\ID{}| has to be defined in the master {\LaTeX} files.)

  \item[\normalfont Further arguments:] \code{inputs} can specify a list of files
        needed during the {\LaTeX} compilation, e.g., private \code{.sty} files
	etc. \code{name} is the (vector of) prefix(es) for the final PDF
	files. \code{quiet = TRUE} suppresses output when calling
        \code{Sweave()} and \code{texi2dvi()}. \code{edir} is the path
	to the exercise directory (defaulting to the current working directory).
	\code{tdir} is the temporary (by default) directory into which
	all files are copied and where \code{Sweave()} and \code{texi2dvi()}
	are called. \code{control} allows a few further control options
	(see also below).
\end{description}

Using these arguments, a set of exams can now be easily produced:
<<>>=
set.seed(1090)
sol <- exams(myexam, n = 5, dir = odir, template = c("exam", "solution"), 
  header = list(ID = getID, Date = Sys.Date()))
@ 
This takes the exam \code{myexam} (for which the corresponding Sweave files
are all provided in the \code{exercises} directory of the package) and
produces five exams (from the \code{exam.tex} {\LaTeX} file) with associated
solutions (from the \code{solution.tex} {\LaTeX} file). The templates are
both provided in the \code{tex} directory of the package and allow for
specification of \verb|\ID{}| and \verb|\Date{}|. All output files
are stored in \code{odir}
<<>>=
list.files(odir)
@ 
and can now be easily inspected by the reader. In addition to the
$2 \cdot 5$ PDF files, there is a file \code{metainfo.rda} containing the
\code{save()}d ``\code{\Sexpr{class(sol)}}'' object which is also stored
in object \code{sol} above. When evaluating an exam, this can be conveniently
\code{load()}ed and individual results can be printed:
<<>>=
print(sol, 1)
print(sol, "exam5")
@
For numeric results, the solution is displayed, possibly including
tolerance limits (if non-zero). For multiple choice answers,
the true statements (coded with letters a--e) are listed and the false
ones are omitted. Consequently, if a multiple choice question
has no true statements, no letters are displayed.

The appearance of multiple choice solutions when
printing ``\code{\Sexpr{class(sol)}}'' objects in \proglang{R}
or in the questionnaire in {\LaTeX} can be modified using the
\code{control} argument. This is
specified by a named list with components \code{mchoice.print} and
\code{mchoice.symbol}. Component \code{mchoice.print} is a list with
elements \code{True} and \code{False} which each give the symbols used
for printing true and false answers respectively. Component
\code{mchoice.symbol} is a vector of length 2 with elements
\code{True} and \code{False} which specify the symbols used in the
answer fields of the questionnaire. An example for changing the
printing is given by:

<<>>=
mycontrol <- list(mchoice.print = list(True = LETTERS[1:5], False = "_"))
(exams(myexam, n = 1, template = "exam", control = mycontrol))
@ 



\section{Discussion} \label{sec:discussion}

Package \pkg{exams} provides a framework for automatic generation of
simple (statistical) exams and associated self-study materials.
It is based on independent exercises in Sweave format which can be
compiled in exams (or other collections of exercises) by providing 
one (or more) master {\LaTeX} template(s). Because contributing to the
pool of exercises just requires knowledge of Sweave and minimal markup
for meta-information, \pkg{exams} facilitates joint development of
lecture materials. 

During 2007, \pkg{exams} was employed by about 10--15 lecturers
at the Department of Statistics and Mathematics of WU Wien
for jointly developing materials for the basic statistics lecture.
Since Spring 2008, \pkg{exams} is used for generating collections
of exercises and trial exams (both available prior to the actual
exam) as well as the exams and associated solutions (which are 
e-mailed to the students individually after correction of the test).
Currently, exams are still corrected ``by hand'' but an automated
procedure using optical character recognition (OCR) software is
in preparation.


%% \section*{Computational details}
%% <<echo=false,results=hide>>=
%% SI <- sessionInfo()
%% pkgs <- paste(sapply(c(SI$otherPkgs, SI$loadedOnly), function(x) 
%%                      paste("\\\\pkg{", x$Package, "} ", 
%%                            x$Version, sep = "")), collapse = ", ")
%% @ 
%% 
%% All computations and graphics in this paper have been done using
%% \proglang{R} version \Sexpr{getRversion()} with package \ Sexpr{pkgs}.

\section*{Acknowledgments}

We are indebted to our colleagues at the Department of Statistics and
Mathematics at WU Wien---in particular Regina T\"uchler and Josef
Leydold---for testing and challenging the code and making suggestions
for improvement. This research was partially supported by the Austrian
Science Foundation (FWF) under Hertha-Firnberg grant T351.

\bibliography{exams}

\end{document}
